import html
import logging
import requests
import random
import asyncio
import re
from typing import Dict, Optional, List, Set
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from api_utils import (
    get_combined_events,
    format_event_message,
    ERA_RANGES
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Wikidata
WIKIDATA_API_URL = "https://www.wikidata.org/w/api.php"
WIKIDATA_SPARQL_URL = "https://query.wikidata.org/sparql"

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç–ø–æ—Ö
ERA_RANGES = {
    'ancient_rus': {'start': '0800', 'end': '1547', 'name': '–î—Ä–µ–≤–Ω—è—è –†—É—Å—å (IX-XVI –≤–≤.)'},
    'tsar_rus': {'start': '1547', 'end': '1721', 'name': '–¶–∞—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVI-XVIII –≤–≤.)'},
    'imperial': {'start': '1721', 'end': '1917', 'name': '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVIII-XX –≤–≤.)'},
    'soviet': {'start': '1917', 'end': '1991', 'name': '–°–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ (1917-1991)'},
    'modern': {'start': '1991', 'end': str(datetime.now().year), 'name': '–ù–∞—à–µ –≤—Ä–µ–º—è (—Å 1991)'}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU, SELECT_CITY, SELECT_ERA, SELECT_TIME = range(4)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict] = {}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –∏—Ö –≤—Ä–µ–º–µ–Ω–µ–º
subscribers: Dict[int, Dict] = {}


async def get_city_wikidata_id(city_name: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞ –≤ Wikidata."""
    try:
        params = {
            'action': 'wbsearchentities',
            'format': 'json',
            'language': 'ru',
            'type': 'item',
            'search': city_name
        }
        response = requests.get(WIKIDATA_API_URL, params=params)
        response.raise_for_status()
        data = response.json()

        if data.get('search'):
            return data['search'][0]['id']
        return None
    except Exception as e:
        logger.error(f"Error getting Wikidata ID for city {city_name}: {e}")
        return None


async def get_events_from_wikidata(city_id: str, era: str, exclude_events: Set[str] = None) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Wikidata."""
    try:
        range_data = ERA_RANGES[era]

        # SPARQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        query = f"""
                SELECT ?event ?eventLabel ?date ?description ?coord WHERE {{
                  ?event wdt:P31 wd:Q1190554;  # instance of historical event
                        wdt:P585 ?date;        # point in time
                        wdt:P276/wdt:P131* wd:{city_id}. # location (city and its administrative units)
                  OPTIONAL {{ ?event schema:description ?description FILTER(LANG(?description) = "ru") }}
                  OPTIONAL {{ ?event wdt:P625 ?coord }}  # coordinates
                  FILTER(?date >= "{range_data['start']}-01-01"^^xsd:dateTime)
                  FILTER(?date <= "{range_data['end']}-12-31"^^xsd:dateTime)
                  SERVICE wikibase:label {{ bd:serviceParam wikibase:language "[AUTO_LANGUAGE],ru". }}
                }}
                ORDER BY ?date
                LIMIT 50
                """

        headers = {'Accept': 'application/sparql-results+json'}
        response = requests.get(WIKIDATA_SPARQL_URL, params={'query': query}, headers=headers)
        response.raise_for_status()
        data = response.json()

        events = []
        for result in data.get('results', {}).get('bindings', []):
            event = {
                'label': result.get('eventLabel', {}).get('value', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ'),
                'date': result.get('date', {}).get('value', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'),
                'description': result.get('description', {}).get('value', '')
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if 'coord' in result:
                coord_value = result['coord']['value']
                try:
                    # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Point(lon lat)
                    match = re.match(r'Point\(([-\d.]+) ([-\d.]+)\)', coord_value)
                    if match:
                        lon, lat = map(float, match.groups())
                        event['coordinates'] = [lat, lon]
                        logger.info(f"Added coordinates for event {event['label']}: {lat}, {lon}")
                except Exception as e:
                    logger.error(f"Error parsing coordinates for event {event['label']}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
            if exclude_events is None or event['label'] not in exclude_events:
                events.append(event)

        return events
    except Exception as e:
        logger.error(f"Error getting events from Wikidata: {e}")
        return []


def eras_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè∞ –î—Ä–µ–≤–Ω—è—è –†—É—Å—å (IX-XVI –≤–≤.)", callback_data='era_ancient_rus')],
        [InlineKeyboardButton("üëë –¶–∞—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVI-XVIII –≤–≤.)", callback_data='era_tsar_rus')],
        [InlineKeyboardButton("‚öúÔ∏è –ò–º–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVIII-XX –≤–≤.)", callback_data='era_imperial')],
        [InlineKeyboardButton("‚ò≠ –°–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ (1917-1991)", callback_data='era_soviet')],
        [InlineKeyboardButton("üèõ –ù–∞—à–µ –≤—Ä–µ–º—è (—Å 1991)", callback_data='era_modern')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back')]
    ])


def time_slider_keyboard(current_hour: int = 10) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-—Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    keyboard = [
        [
            InlineKeyboardButton("‚óÄÔ∏è", callback_data='time_prev'),
            InlineKeyboardButton(f"{current_hour:02d}:00", callback_data='time_confirm'),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data='time_next')
        ],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_historical_event(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ Wikidata –∏ Wikipedia."""
    try:
        city = user_data[user_id]['city']
        era = user_data[user_id]['era']

        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        shown_events = user_data[user_id].get('shown_events', set())

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
        events = await get_combined_events(city, era, shown_events)

        if not events:
            if shown_events:
                return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è {city} –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã."
            return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è {city} –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event = random.choice(events)
        logger.info(f"Selected event for formatting: {event}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö
        if 'shown_events' not in user_data[user_id]:
            user_data[user_id]['shown_events'] = set()
        user_data[user_id]['shown_events'].add(event['label'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message, url = format_event_message(event, city)
        logger.info(f"Generated URL: {url}")
        message += f"\nüó∫ <a href='{url}'>–°–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ</a>"

        return message

    except Exception as e:
        logger.error(f"Error in get_historical_event: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def select_era(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user = update.effective_user
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ø–æ—Ö–∏ –∏–∑ callback_data
    era = query.data.replace('era_', '')  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'era_'

    user_data[user.id]['era'] = era
    user_data[user.id]['shown_events'] = set()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

    era_names = {
        'ancient_rus': '–î—Ä–µ–≤–Ω—è—è –†—É—Å—å (IX-XVI –≤–≤.)',
        'tsar_rus': '–¶–∞—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVI-XVIII –≤–≤.)',
        'imperial': '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVIII-XX –≤–≤.)',
        'soviet': '–°–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ (1917-1991)',
        'modern': '–ù–∞—à–µ –≤—Ä–µ–º—è (—Å 1991)'
    }

    if era not in era_names:
        logger.error(f"Invalid era selected: {era}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ø–æ—Ö–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=eras_keyboard()
        )
        return SELECT_ERA

    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —ç–ø–æ—Ö–∞: {era_names[era]}",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    city = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ Wikidata
    city_id = await get_city_wikidata_id(city)
    if not city_id:
        await update.message.reply_text(
            f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=cancel_keyboard()
        )
        return SELECT_CITY

    user_data[user.id]['city'] = city
    user_data[user.id]['city_id'] = city_id
    user_data[user.id]['shown_events'] = set()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

    await update.message.reply_text(
        f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {city}",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data='change_city')],
        [InlineKeyboardButton("‚è≥ –í—ã–±—Ä–∞—Ç—å —ç–ø–æ—Ö—É", callback_data='choose_era')],
        [InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å–µ–π—á–∞—Å", callback_data='get_event')],
        [InlineKeyboardButton("üìÖ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='subscribe')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ])


def cancel_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user

    # –ü–æ–ª—É—á–∞–µ–º Wikidata ID –¥–ª—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞
    city_id = await get_city_wikidata_id('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')

    user_data[user.id] = {
        'city': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        'city_id': city_id,
        'era': 'imperial',
        'shown_events': set()
    }

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø - –±–æ—Ç ¬´–î–Ω–µ–≤–Ω–æ–π –ü–µ—Ç–µ—Ä–±—É—Ä–≥¬ª. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ "
        "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è.\n\n"
        "–°–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:\n"
        f"üìç –ì–æ—Ä–æ–¥: {user_data[user.id]['city']}\n"
        f"‚è≥ –≠–ø–æ—Ö–∞: –ò–º–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –†–æ—Å—Å–∏—è (XVIII-XX –≤–≤.)",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/subscribe - –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "/unsubscribe - –ù–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è:\n"
        "üìç –ò–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞\n"
        "‚è≥ –í—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
        "üìú –ü–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
        "üìÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
        reply_markup=main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == 'change_city':
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=cancel_keyboard()
        )
        return SELECT_CITY

    elif query.data == 'choose_era':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —ç–ø–æ—Ö—É:",
            reply_markup=eras_keyboard()
        )
        return SELECT_ERA

    elif query.data == 'get_event':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = await query.edit_message_text(
            "‚è≥ –ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è...\n\n"
            "üîç –ü—Ä–æ–≤–µ—Ä—è—é Wikidata...\n"
            "üìö –ò—â—É –≤ Wikipedia...\n"
            "üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞—Ç—ã...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='loading_status')]
            ])
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        status_messages = [
            "üîç –ü—Ä–æ–≤–µ—Ä—è—é Wikidata...",
            "üìö –ò—â—É –≤ Wikipedia...",
            "üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞—Ç—ã...",
            "üìù –§–æ—Ä–º–∞—Ç–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            "‚è≥ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
        ]
        status_index = 0

        async def update_loading_status():
            nonlocal status_index
            while True:
                await asyncio.sleep(2)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                if status_index >= len(status_messages):
                    status_index = 0
                status_text = "\n".join([
                    "‚è≥ –ò—â—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è...\n",
                    status_messages[status_index]
                ])
                try:
                    await loading_message.edit_text(
                        status_text,
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='loading_status')]
                        ])
                    )
                except Exception as e:
                    logger.error(f"Error updating loading status: {e}")
                    break
                status_index += 1

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ–Ω–µ
        status_task = asyncio.create_task(update_loading_status())

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = await get_historical_event(query.from_user.id)
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            status_task.cancel()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_message.edit_text(
                f"üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n{event}\n\n",
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÅ –ï—â–µ —Å–æ–±—ã—Ç–∏–µ", callback_data='get_event')],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
                ])
            )
        except Exception as e:
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            status_task.cancel()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await loading_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='get_event')],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
                ])
            )
            logger.error(f"Error getting event: {e}")

        return MAIN_MENU

    elif query.data == 'loading_status':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        await query.answer("‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...")
        return MAIN_MENU

    elif query.data == 'subscribe':
        return await subscribe(update, context)

    elif query.data == 'help':
        return await help_command(update, context)

    elif query.data == 'cancel':
        return await cancel(update, context)

    elif query.data == 'back':
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    return MAIN_MENU


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        user = update.callback_query.from_user
        message = update.callback_query.message
    else:
        user = update.effective_user
        message = update.message

    if user.id in subscribers:
        current_time = subscribers[user.id].get('time', time(10, 0))
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!\n"
                f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {current_time.hour:02d}:00\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=main_menu_keyboard()
            )
        else:
            await message.reply_text(
                "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!\n"
                f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {current_time.hour:02d}:00\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=main_menu_keyboard()
            )
        return MAIN_MENU

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['temp_hour'] = 10

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=time_slider_keyboard(10)
        )
    else:
        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=time_slider_keyboard(10)
        )
    return SELECT_TIME


async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä."""
    query = update.callback_query
    await query.answer()

    if query.data == 'back':
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_hour = context.user_data.get('temp_hour', 10)

    if query.data == 'time_prev':
        current_hour = (current_hour - 1) % 24
    elif query.data == 'time_next':
        current_hour = (current_hour + 1) % 24
    elif query.data == 'time_confirm':
        user = query.from_user

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        subscribers[user.id] = {
            'city': user_data[user.id]['city'],
            'city_id': user_data[user.id].get('city_id'),
            'era': user_data[user.id]['era'],
            'time': time(hour=current_hour, minute=0)
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        job_name = f'daily_event_{user.id}'
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if job_name in context.job_queue.jobs():
            context.job_queue.jobs()[job_name].schedule_removal()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_daily(
            send_daily_event,
            time=time(hour=current_hour, minute=0),
            name=job_name,
            data={'user_id': user.id}
        )

        await query.edit_message_text(
            f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è!\n"
            f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {current_hour:02d}:00",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —á–∞—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['temp_hour'] = current_hour

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=time_slider_keyboard(current_hour)
    )
    return SELECT_TIME


async def send_daily_event(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É."""
    user_id = context.job.data['user_id']
    if user_id not in subscribers:
        return

    try:
        event_text = await get_historical_event(user_id)
        if event_text.startswith("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é") or event_text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå {event_text}",
                reply_markup=main_menu_keyboard()
            )
            return

        await context.bot.send_message(
            chat_id=user_id,
            text=f"üìú –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n{event_text}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ï—â–µ —Å–æ–±—ã—Ç–∏–µ", callback_data='get_event')],
                [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
            ])
        )
    except Exception as e:
        logger.error(f"Error sending daily event to user {user_id}: {e}")
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    user = update.effective_user
    if user.id in subscribers:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        job_name = f'daily_event_{user.id}'
        if job_name in context.job_queue.jobs():
            context.job_queue.jobs()[job_name].schedule_removal()

        del subscribers[user.id]
        await update.message.reply_text(
            "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π.",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.",
            reply_markup=main_menu_keyboard()
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token("7163161959:AAECiAYMJlfo_40ka-9oapDNrA1fHmJeHjM").build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('subscribe', subscribe))
    application.add_handler(CommandHandler('unsubscribe', unsubscribe))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu,
                                     pattern='^(change_city|choose_era|get_event|subscribe|help|cancel|back)$')
            ],
            SELECT_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_city),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            SELECT_ERA: [
                CallbackQueryHandler(select_era, pattern='^era_'),
                CallbackQueryHandler(main_menu, pattern='^back$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            SELECT_TIME: [
                CallbackQueryHandler(select_time, pattern='^(time_prev|time_next|time_confirm|back)$')
            ]
        },
        fallbacks=[
            CommandHandler('help', help_command),
            CommandHandler('start', start)
        ],
        per_message=False
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))

    application.run_polling()


if __name__ == '__main__':
    main()